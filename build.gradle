plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url 'https://maven.wispforest.io' }
    maven {
        name = "Modrinth"
        url "https://api.modrinth.com/maven"
        content {includeGroup "maven.modrinth" }
    }
    mavenLocal()
}

dependencies {
    // Loader stuff
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Depends
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    modImplementation "me.alphamode:Star:${project.star_version}"

    include modApi("teamreborn:energy:${project.energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    //Locals
    modLocalRuntime("maven.modrinth:ferrite-core:${project.ferrite_core}")
    modLocalRuntime("maven.modrinth:lithium:${project.lithium}")
    //modLocalRuntime ("maven.modrinth:sodium:${project.sodium}")
    modImplementation modLocalRuntime('org.joml:joml:1.10.2')
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/generated/resources'
            ]
        }
    }
}

loom {
    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=malding_reactors"

            runDir "build/datagen"
        }
        client_renderDoc {
            client()
            ideConfigGenerated true
            name = "[${project.archivesBaseName}] Client - (RenderDoc)"
            source sourceSets.main
            vmArg "-Dowo.renderdocPath=${System.getenv('renderDocPath')}"
        }
        client_mixin {
            client()
            ideConfigGenerated true
            name = "[${project.archivesBaseName}] Client - (Mixin Swap)"
            source sourceSets.main
            vmArg "-Dmixin.debug.export=true"

            try {
                afterEvaluate {
                    def mixinDep = this.configurations.compileClasspath
                            .allDependencies
                            .findAll { it.name == "sponge-mixin" }
                            .first()

                    if (mixin != null) {
                        def mixinPath = this.configurations.compileClasspath.files(mixinDep).first().path;

                        println(mixinPath)

                        vmArg("-javaagent:\"${mixinPath}\"")

                        println("[Info]: Mixin Hotswap Run should be working")
                    } else {
                        println("[Warning]: Unable to locate file path for Mixin Jar, HotSwap Run will not work!!!")
                    }
                }
            } catch (Exception e) {
                println("[Error]: MixinHotswap Run had a issue!")
                e.printStackTrace()
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
